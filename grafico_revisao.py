# -*- coding: utf-8 -*-
"""Grafico-Revisao.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18no2mzOrhzzrcp57Icf5vl3kQtMn-oq2

# Construção do Dataframe

## Carregamento dos dados
"""

!pip install bibtexparser

import pandas as pd
import bibtexparser
import re

bib = '/content/included.bib'

# Carregar o arquivo .bib
with open(bib, encoding='utf-8') as bibfile:
    bib_database = bibtexparser.load(bibfile)

# Obter as entradas como dicionários
entries = bib_database.entries

df = pd.DataFrame(entries)

df['note'][0]

"""## Funções para extração e tratamento dos dados"""

def extract_labels(text):
    match = re.search(r'RAYYAN-LABELS\s*:\s*(.*?)(\s*\||$)', text)
    return match.group(1).strip() if match else None

def extract_qdata(text):
    match = re.search(r'USER-NOTES\s*:\s*{.*?\[([^\]]+)\]}', text)
    if match:
        first_value = match.group(1).split(',')[0].strip().strip('"')
        return first_value
    return None

def extract_2qdata(text):
    match = re.search(r'USER-NOTES\s*:\s*{.*?\[([^\]]+)\]}', text)
    if match:
        values = [v.strip().strip('"') for v in match.group(1).split(',')]
        if len(values) > 1:
            return values[1]  # retorna o segundo valor, se existir
    return None

def substitute_labels(df_column):
    # Converte a coluna para string
    df_column = df_column.astype('string')
    substitutes = {'Suporte à aprendizagem e personalização': 'Learning support and personalization',
                   'Insights para tomada de decisão': 'Data-driven insights for decision-making',
                   'Promoção do engajamento e motivação': 'Promotion of engagement and motivation',
                   'Acessibilidade e usabilidade': 'Accessibility and usability improvements',
                   'SIM': 'YES',
                   'NÃO': 'NO'}
    df_column = df_column.replace(substitutes)
    return df_column

"""## Tratamento dos dados"""

data = df[['title', 'year']]

# Ano para número
data['year'] = pd.to_numeric(data['year'].copy())

data['category'] = df['note'].copy().apply(extract_labels)

data['category'] = substitute_labels(data['category'].copy())

data['presents-qdata'] = substitute_labels(df['note'].copy().apply(extract_qdata))

data['applied'] = substitute_labels(df['note'].copy().apply(extract_2qdata))

data

"""## Ordenação e exportação do dataframe"""

#data = data.sort_values(by='presents-qdata', ascending=True, ignore_index=True)
data = data.sort_values(by='year', ascending=True, ignore_index=True)
#data = data.sort_values(by='title', ascending=True, ignore_index=True)
#data

data.to_excel('tabela-de-revisao.xlsx', index=False, sheet_name='Resultados')

"""# Criação dos Gráficos"""

import plotly.graph_objects as go
import plotly.colors as pc

fig_data = data.copy()

# ano → nome
fluxo1 = fig_data[['title', 'year']].copy()
fluxo1.columns = ['source', 'target']

# nome → categoria
fluxo2 = fig_data[['year', 'category']].copy()
fluxo2.columns = ['source', 'target']

# categoria → aplicação
fluxo3 = fig_data[['category', 'presents-qdata']].copy()
fluxo3.columns = ['source', 'target']


# Combina os fluxos
sankey_df = pd.concat([fluxo2, fluxo3], ignore_index=True)

# Cria a lista única de nós
labels = pd.unique(sankey_df[['source', 'target']].values.ravel())
label_map = {label: i for i, label in enumerate(labels)}

# Mapeia o source/target para os IDs
sankey_df['source_id'] = sankey_df['source'].map(label_map)
sankey_df['target_id'] = sankey_df['target'].map(label_map)

label_map

# Conta os fluxos (agrupamento)
sankey_df = sankey_df.value_counts().reset_index(name='value')

# Define as cores de nodos específicos
colors = pc.qualitative.Plotly.copy()
colors[1], colors[9] = 'coral', '#636EFA'
colors.append('#EF553B')

colors, len(colors)

# Plota o gráfico
fig = go.Figure(data=[go.Sankey(
    node=dict(
        pad=20,
        thickness=25,
        label=labels,
        color = colors
    ),
    link=dict(
        source=sankey_df['source_id'],
        target=sankey_df['target_id'],
        value=sankey_df['value']
    )
)])

fig.update_layout(
    #title_text="Distribuição de estudos",
    height=800,
    width=1400,
    font=dict(
        size=24,
        style="normal",
        color = 'black'
    )
)